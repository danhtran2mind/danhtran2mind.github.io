<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://danhtran2mind.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://danhtran2mind.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-31T05:16:15+00:00</updated><id>https://danhtran2mind.github.io/feed.xml</id><title type="html">blank</title><subtitle>The Official Website of DanhTran2Mind - A Friendly, Warm-Hearted Person who loves Programming, Machine Learning, and Data Science. </subtitle><entry><title type="html">Boost Your Online Skills</title><link href="https://danhtran2mind.github.io/blog/2025/post6/" rel="alternate" type="text/html" title="Boost Your Online Skills"/><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2025/post6</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2025/post6/"><![CDATA[<h1 id="kaggle-skills">Kaggle Skills</h1> <h2 id="kaggle">Kaggle</h2> <h3 id="encrypted-kaggle-anti-disconnection-script-">Encrypted Kaggle Anti-Disconnection Script üîí</h3> <p>This is encrypted Kaggle anti-Disconnection script, you must decrypt it to use.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>36Abo+KbEidkc/+V4ygnEuj2xS2I6e1vJmasPznKTrNg2Ewjxenice/3cSSwx9Vp4fE+3rtRYQ8jBWF9us
JSZosRXG4bhvdRxq38TqeW7hNF0imQGytctzPtBy6fuSH8IxZj0TLVR0YvKL6+vMHtTV8Chqsxc6tIOYjD
rJdBsmpOFXTeTxFYsDd71ikGRlJ7kEmJUuX+Q4cBotfw7qsJO4Wzg2k0H6rLnO9CZPNK8m5aQDm1h4sgXN
uzW2kJfq5d8sYrAb1C1NgUZbBsSgw3E9GPUBG51NnL/r+1HFYfeqzJj3AAv6Xtn6FnNUYjYVLH3GqDctXf
6U3SPVQ5trCO41/aUi7BwJeAL37P3/Df/fNQBkG5f/t1hiYYOyXApB9mWH6c3aObhxB2U8a6HQt1OBPT+L
AMGEqJ7YzaeOwXS0Okyht0SxxvRSTVlXHBdPaKE7NqK4C+sMUfG7Qj3sm8Qw2gChwNiKNff+TLW4J3c8CM
48EOsfyhlTVUZu9//dU5hLWIl2L9R8h+FD4A3XG9JAUTI5wdyoGWk7q1G7Zf/hVjvjAvB6LGel6NirAFT/
kl4bN2p9RWdNubWS3vuK0T2IQjJXepx3ZG/6f+M5dMwrG2U4qhzTSVa6sGVeNwEwi0dHVONIlSBRRVNtiB
cO/m1zXCPHrMuUSTVK6zvr56rCLmuQ9U7MRMb2fQ/XY/dtu0Hby5DhVGebjmK3XKWtn6k0iLMxIjJgrgWD
OzYaYkJK2eI6WrMBKn3o7BUNsTko9ZBgtVtJ5Hq4iBx37/Vt57s7/Pau0sa7JxNs0Q43Woc4IZypW7/2ED
u5l3bZr/EuIvXehamMemeIWJqUwVMWakahmMWyq1MAD16xkZGsYoB6Mg3SWk886PZQrlCTL2U4AqKsFE3e
1BVmN1QWD0eYq1NNier+y6RLz9A3NntQpDKjpQrq/W23TIfb4MnFgPQ+oEMT07ILUE3JcpL1Tgbmnwr/j5
7SdCOTlBhgj4nrMDcbbLSf8Ac8Ta8ao+8icoYogDHvHXiY+YTH9Bsoj/TCf7DYAypXYyOSstftCMrBK5/Z
t40CbZZKHsGI5rkjz8OGcb/tVDE7BTepvGBJlG6EHF4azPWFt5BhAyBIRoPLEtivpnIoIRo6LcS+DLeUk3
UPnBADPZ/dxrjcIwLIKWT9ZQwBL4gpDvk3vRIb42leKUI+50xT3+y+qHYJS11nYwBctjtMUoy8tVMIdXFQ
LovuB1quBWx8H5m10qkVd9SC8nAUR2YM/XxwoLDXLB0sbj4W3K+ohSP0aWkUIX9HIteNToGj1vD/eJ2QvJ
p7vMVJekdatGTDx61c5HLpTChNV9hNcaBvJXZU2F5GLHLzJs3+0T8RPkdVu0XajmrY7UD/t55uASDgDZUd
YvNewlAz3YDiBXCRh+8kz/2ucWGprlJhuzKiVCjA0F8OmoDzZh1igjmvc=
</code></pre></div></div> <h3 id="using-the-script-in-your-browser">Using the Script in Your Browser</h3> <ol> <li><strong>Open Developer Tools</strong>: Press <code class="language-plaintext highlighter-rouge">F12</code> or right-click on the page and select <strong>Inspect</strong>, then navigate to the <strong>Console</strong> tab.</li> <li><strong>Enable Pasting (if prompted)</strong>: If your browser displays an <code class="language-plaintext highlighter-rouge">allow pasting</code> prompt, type <code class="language-plaintext highlighter-rouge">allow pasting</code> manually into the Console and press <code class="language-plaintext highlighter-rouge">Enter</code>.</li> <li><strong>Run the Script</strong>: Copy the script from the <strong>Decrypted Message</strong> section, paste it into the Console, and hit <code class="language-plaintext highlighter-rouge">Enter</code> to execute it.</li> </ol> <p>Get ready to unlock the magic with just a few clicks! üöÄ</p> <h2 id="download-kaggle-dataset-without-login">Download Kaggle Dataset without login</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> https://www.kaggle.com/api/v1/datasets/download/&lt;kaggle-user&gt;/&lt;dataset-name&gt; <span class="se">\</span>
<span class="nt">-o</span> &lt;/path_you_wnat_to_store&gt;
</code></pre></div></div> <h1 id="decrypt-messages-app--">Decrypt Messages App üì© üîì</h1> <h2 id="option-1-use-the-decryption-app">Option 1: Use the Decryption App</h2> <p>Use the embedded app below to decrypt your message. Be sure to check the <strong><code class="language-plaintext highlighter-rouge">Use \n elimination</code></strong> option to properly handle newline characters.</p> <iframe src="https://danhtran2mind-decrypt-message.hf.space" frameborder="0" width="850" height="450"></iframe> <h2 id="option-2-decrypt-with-your-own-tool">Option 2: Decrypt with Your Own Tool</h2> <p>You can also decrypt the message using your preferred programming environment. To ensure compatibility, remove all <code class="language-plaintext highlighter-rouge">\n</code> (newline) characters from the encrypted string before processing.</p> <p>For example, in Python:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Replace enc_string with your encrypted string, e.g., 36A...mvc=
</span><span class="n">processed_enc_string</span> <span class="o">=</span> <span class="n">enc_string</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
</code></pre></div></div> <h2 id="get-the-key-">Get the Key üîë</h2> <p>Contact me for an AES-256 key. It‚Äôs partially provided‚Äîyou‚Äôll need to brute-force the final letter! üíª</p> <p>For example: with key: <code class="language-plaintext highlighter-rouge">abc1234</code><span style="color:red;">5</span>, you will get <code class="language-plaintext highlighter-rouge">abc1234</code> and you must find the final letter is <span style="color:red;">5</span>.</p> <p>Updated with ‚ÄúDecrypt App Message‚Äù as requested, keeping the concise and engaging style! üòé</p>]]></content><author><name></name></author><category term="Decryption-App"/><category term="RSA"/><category term="Kaggle"/><summary type="html"><![CDATA[Enhance essential online skills: effectively surf, code, secure, and conquer various digital challenges.]]></summary></entry><entry><title type="html">Directory Tree Printer</title><link href="https://danhtran2mind.github.io/blog/2025/post5/" rel="alternate" type="text/html" title="Directory Tree Printer"/><published>2025-05-04T00:00:00+00:00</published><updated>2025-05-04T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2025/post5</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2025/post5/"><![CDATA[<h1 id="directory-tree-printer">Directory Tree Printer</h1> <p>This script is designed to print the directory tree of a specified directory. It recursively lists all subdirectories and files, excluding hidden entries (those starting with a dot <code class="language-plaintext highlighter-rouge">.</code>). The output is formatted to clearly visualize the directory structure. Additionally, an alternative method using the <code class="language-plaintext highlighter-rouge">seedir</code> library with emoji styling is included for a more visually engaging output.</p> <h2 id="features">Features</h2> <ul> <li><strong>Recursive Listing</strong>: Traverses all subdirectories and files.</li> <li><strong>Exclusion of Hidden Entries</strong>: Hidden directories and files are not included in the scratch method.</li> <li><strong>Formatted Output</strong>: Uses connectors (<code class="language-plaintext highlighter-rouge">‚îú‚îÄ‚îÄ</code>, <code class="language-plaintext highlighter-rouge">‚îî‚îÄ‚îÄ</code>, <code class="language-plaintext highlighter-rouge">‚îÇ </code>) or emoji-based styling for a clear visual structure.</li> <li><strong>Custom Sorting</strong>: Prioritizes directories over files in the output.</li> <li><strong>Flexible Display Options</strong>: Supports both a custom recursive function and the <code class="language-plaintext highlighter-rouge">seedir</code> library with emoji styling.</li> </ul> <h2 id="how-it-works">How It Works</h2> <ol> <li><strong>Scratch Method</strong>: <ul> <li>Lists all entries in the specified directory.</li> <li>Separates directories and files, excluding hidden entries.</li> <li>Sorts directories and files, listing directories first.</li> <li>Prints entries with appropriate connectors and indentation.</li> <li>Recurses into subdirectories with updated indentation and prefix.</li> </ul> </li> <li><strong>Seedir Method</strong>: <ul> <li>Uses the <code class="language-plaintext highlighter-rouge">seedir</code> library to generate a directory tree.</li> <li>Applies emoji styling for visual appeal.</li> <li>Custom sorting prioritizes folders over files.</li> <li>Limits the number of displayed items per directory for brevity, with an option to indicate additional content.</li> </ul> </li> </ol> <h2 id="example-usage">Example Usage</h2> <h3 id="scratch-method">Scratch Method</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>

<span class="k">def</span> <span class="nf">print_directory_tree</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">):</span>
    <span class="c1"># Get list of all entries in the directory
</span>    <span class="n">entries</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
    <span class="c1"># Separate directories and files, excluding hidden entries
</span>    <span class="n">dirs</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">e</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">entries</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">e</span><span class="p">))</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">e</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)])</span>
    <span class="n">files</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">e</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">entries</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">e</span><span class="p">))</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">e</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)])</span>
    <span class="c1"># Combine: directories first, then files
</span>    <span class="n">sorted_entries</span> <span class="o">=</span> <span class="n">dirs</span> <span class="o">+</span> <span class="n">files</span>
    
    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">entry</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">sorted_entries</span><span class="p">):</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">entry</span><span class="p">)</span>
        <span class="c1"># Determine connector based on whether it's the last entry
</span>        <span class="n">connector</span> <span class="o">=</span> <span class="sh">"</span><span class="s">‚îî‚îÄ‚îÄ</span><span class="sh">"</span> <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">sorted_entries</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="sh">"</span><span class="s">‚îú‚îÄ‚îÄ</span><span class="sh">"</span>
        <span class="c1"># Print current entry
</span>        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">indent</span><span class="si">}{</span><span class="n">prefix</span><span class="si">}{</span><span class="n">connector</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">entry</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># If it's a directory, recurse with updated indent and prefix
</span>        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="c1"># Use different prefix for last entry to align properly
</span>            <span class="n">new_prefix</span> <span class="o">=</span> <span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">sorted_entries</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="sh">"</span><span class="s">‚îÇ   </span><span class="sh">"</span>
            <span class="nf">print_directory_tree</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">indent</span> <span class="o">+</span> <span class="n">new_prefix</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
            
<span class="c1"># Example usage
</span><span class="n">directory</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./sample_data</span><span class="sh">"</span>  <span class="c1"># Specify directory
</span><span class="nf">print</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">directory</span><span class="p">)))</span>  <span class="c1"># Print root directory name
</span><span class="nf">print_directory_tree</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</code></pre></div></div> <h3 id="seedir-method">Seedir Method</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>seedir emoji
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">seedir</span> <span class="kn">import</span> <span class="n">seedir</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="c1"># Custom sort key to prioritize folders
</span><span class="k">def</span> <span class="nf">sort_folders_first</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">item</span><span class="p">)),</span> <span class="n">item</span><span class="p">.</span><span class="nf">lower</span><span class="p">())</span>

<span class="c1"># Display directory structure with folders sorted first and `emoji` style
</span><span class="n">directory</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./sample_data</span><span class="sh">"</span>  <span class="c1"># Specify directory
</span><span class="nf">seedir</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">itemlimit</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">beyond</span><span class="o">=</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="sh">'</span><span class="s">emoji</span><span class="sh">'</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sort_key</span><span class="o">=</span><span class="n">sort_folders_first</span><span class="p">)</span>
</code></pre></div></div> <h2 id="example-output">Example Output</h2> <h3 id="scratch-method-1">Scratch Method</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sample_data
‚îú‚îÄ‚îÄ dir1
‚îÇ   ‚îú‚îÄ‚îÄ file1.txt
‚îÇ   ‚îú‚îÄ‚îÄ file2.txt
‚îÇ   ‚îú‚îÄ‚îÄ file3.txt
‚îÇ   ‚îú‚îÄ‚îÄ file4.txt
‚îÇ   ‚îî‚îÄ‚îÄ file5.txt
‚îú‚îÄ‚îÄ dir2
‚îÇ   ‚îî‚îÄ‚îÄ file6.txt
‚îî‚îÄ‚îÄ file7.txt
</code></pre></div></div> <h3 id="seedir-method-1">Seedir Method</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sample_dataüìÅ
‚îú‚îÄüìÅdir1
‚îÇ ‚îú‚îÄüìÑfile1.txt
‚îÇ ‚îú‚îÄüìÑfile2.txt
‚îÇ ‚îú‚îÄüìÑfile3.txt
‚îÇ ‚îî‚îÄ0 folder(s), 2 file(s)
‚îú‚îÄüìÅdir2
‚îÇ ‚îî‚îÄüìÑfile6.txt
‚îî‚îÄüìÑfile7.txt
</code></pre></div></div> <h2 id="notes">Notes</h2> <ul> <li>The scratch method excludes hidden directories and files by default and uses simple text-based connectors for clarity.</li> <li>The <code class="language-plaintext highlighter-rouge">seedir</code> method enhances the output with emoji icons and allows limiting the number of displayed items per directory (e.g., <code class="language-plaintext highlighter-rouge">itemlimit=3</code>).</li> <li>Both methods prioritize directories over files in the output for better organization.</li> <li>To use the <code class="language-plaintext highlighter-rouge">seedir</code> method, ensure the <code class="language-plaintext highlighter-rouge">seedir</code> and <code class="language-plaintext highlighter-rouge">emoji</code> packages are installed (<code class="language-plaintext highlighter-rouge">pip install seedir emoji</code>).</li> <li>Modify the directory path or parameters (e.g., <code class="language-plaintext highlighter-rouge">itemlimit</code>, <code class="language-plaintext highlighter-rouge">style</code>) to suit your needs.</li> </ul> <p>This markdown provides a comprehensive overview of the directory tree printing script, incorporating both the scratch recursive method and the <code class="language-plaintext highlighter-rouge">seedir</code>-based method with emoji styling.</p>]]></content><author><name></name></author><category term="Markdown"/><category term="Python"/><summary type="html"><![CDATA[Prints directory tree structure, excluding hidden entries, with clear and formatted visualization output.]]></summary></entry><entry><title type="html">GitHub Setup and Encryption Guide</title><link href="https://danhtran2mind.github.io/blog/2025/post4/" rel="alternate" type="text/html" title="GitHub Setup and Encryption Guide"/><published>2025-04-18T00:00:00+00:00</published><updated>2025-04-18T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2025/post4</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2025/post4/"><![CDATA[<h1 id="1--github-setup-and-encryption-guide-">1 üåü GitHub Setup and Encryption Guide üåü</h1> <p>Welcome to this friendly guide! üéâ We‚Äôll walk you through setting up Git, configuring GitHub credentials, managing repositories, and securing files with <code class="language-plaintext highlighter-rouge">git-crypt</code> in a Linux environment. Let‚Äôs make your GitHub workflow smooth and secure! üöÄ</p> <h2 id="11-Ô∏è-install-dependencies-on-linux">1.1 üõ†Ô∏è Install Dependencies on Linux</h2> <p>First, let‚Äôs install the tools we need to manage repositories and encrypt files. Run these commands to get <code class="language-plaintext highlighter-rouge">git</code>, <code class="language-plaintext highlighter-rouge">git-lfs</code>, <code class="language-plaintext highlighter-rouge">git-crypt</code>, and <code class="language-plaintext highlighter-rouge">gnupg</code> ready! üîß</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>git git-lfs
git lfs <span class="nb">install
</span>curl <span class="nt">-s</span> https://packagecloud.io/install/repositories/github/git-crypt/script.deb.sh | bash
apt-get <span class="nb">install </span>git-crypt
<span class="nb">sudo </span>apt-get <span class="nb">install </span>gnupg
</code></pre></div></div> <h2 id="12--configure-username-and-email">1.2 üë§ Configure Username and Email</h2> <p>Set up your Git global configuration with your GitHub username, email, and personal access token. This ensures GitHub knows it‚Äôs you! üòä</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">username</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your_github_username</span><span class="sh">"</span>
<span class="n">email</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your_github_username_email</span><span class="sh">"</span>
<span class="n">token</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your_github_token</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"your_github_username"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your_github_username_email"</span>
git config <span class="nt">--global</span> credential.helper store
git config <span class="nt">--global</span> url.https://your_github_token@github.com/.insteadOf <span class="s2">"https://github.com/"</span>
git config <span class="nt">--global</span> core.editor <span class="s2">"nano"</span>
</code></pre></div></div> <h1 id="2--upload-to-github">2 üì§ Upload to GitHub</h1> <h2 id="21--clone-an-existing-repository">2.1 üìÇ Clone an Existing Repository</h2> <p>Got an existing repo? Let‚Äôs clone it and make your first commit! üóÇÔ∏è</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">repo_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your_github_repo</span><span class="sh">"</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your_github_username/your_github_repo.git
<span class="nb">cd </span>your_github_repo
<span class="nb">echo</span> <span class="s2">"# your_github_repo"</span> <span class="o">&gt;&gt;</span> README.md
git add README.md
git commit <span class="nt">-m</span> <span class="s2">"first commit"</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h2 id="22--create-a-new-repository">2.2 ‚ú® Create a New Repository</h2> <p>Want to start fresh? Create a new GitHub repository using the GitHub API and set it up locally. üå±</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>

<span class="n">repo_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">new-repo-from-colab</span><span class="sh">"</span>
<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://api.github.com/user/repos</span><span class="sh">"</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">Authorization</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">token </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">Content-Type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">application/json</span><span class="sh">'</span>
<span class="p">}</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="n">repo_name</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">A repository created from Google Colab</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">private</span><span class="sh">'</span><span class="p">:</span> <span class="bp">False</span>
<span class="p">}</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">201</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Repository </span><span class="sh">'</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="sh">'</span><span class="s"> created successfully.</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to create repository. Status code: </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div> <p>Now, initialize the local repository and push it to GitHub! üöÄ</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>new-repo-from-colab
<span class="nb">cd </span>new-repo-from-colab
git init
git branch <span class="nt">-M</span> main
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>

<span class="n">remote_url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">https://</span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="s">@github.com/</span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">repo_name</span><span class="si">}</span><span class="s">.git</span><span class="sh">"</span>
<span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">'</span><span class="s">git</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">remote</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">add</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">origin</span><span class="sh">'</span><span class="p">,</span> <span class="n">remote_url</span><span class="p">],</span> <span class="n">check</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"# H1</span><span class="se">\n</span><span class="s2">## H2</span><span class="se">\n</span><span class="s2">### H3</span><span class="se">\n</span><span class="s2">- a</span><span class="se">\n</span><span class="s2">- b"</span> <span class="o">&gt;&gt;</span> README.md
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"my commit"</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h1 id="3--encrypt-files-or-folders-using-git-crypt">3 üîí Encrypt Files or Folders Using git-crypt</h1> <p>Keep your sensitive files safe with <code class="language-plaintext highlighter-rouge">git-crypt</code>! Let‚Äôs see how to encrypt files and folders. üõ°Ô∏è</p> <h2 id="31--initialize-git-crypt">3.1 üîë Initialize git-crypt</h2> <p>Set up <code class="language-plaintext highlighter-rouge">git-crypt</code> in your repository to enable encryption.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git-crypt init
</code></pre></div></div> <h2 id="32--encrypt-individual-files">3.2 üìú Encrypt Individual Files</h2> <p>Encrypt a specific file, like <code class="language-plaintext highlighter-rouge">abc.txt</code>, so only authorized users can read it. üîê</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"this is abc.txt, which has been encrypt"</span> <span class="o">&gt;&gt;</span> abc.txt
<span class="nb">echo</span> <span class="s2">"abc.txt filter=git-crypt diff=git-crypt"</span> <span class="o">&gt;</span> .gitattributes
git add .gitattributes
git commit <span class="nt">-m</span> <span class="s2">"Add git-crypt configuration for abc.txt"</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add encrypted abc.txt"</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h2 id="33--encrypt-folders">3.3 üìÅ Encrypt Folders</h2> <p>Encrypt an entire folder, such as <code class="language-plaintext highlighter-rouge">do-not-touch</code>, and all its contents. üóÇÔ∏èüîí</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span><span class="k">do</span><span class="nt">-not-touch</span>
<span class="nb">mkdir </span><span class="k">do</span><span class="nt">-not-touch</span>/abc-f
<span class="nb">echo</span> <span class="s2">"this is abc.txt, which has been encrypt"</span> <span class="o">&gt;&gt;</span> <span class="k">do</span><span class="nt">-not-touch</span>/abc.txt
<span class="nb">echo</span> <span class="s2">"hello 2"</span> <span class="o">&gt;&gt;</span> <span class="k">do</span><span class="nt">-not-touch</span>/abc-f/nhb.txt
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"abc.txt filter=git-crypt diff=git-crypt</span><span class="se">\n</span><span class="s2">do-not-touch/** filter=git-crypt diff=git-crypt"</span> <span class="o">&gt;&gt;</span> .gitattributes
git-crypt status <span class="nt">-f</span>
git add .gitattributes
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add git-crypt configuration for abc.txt"</span>
git push <span class="nt">-u</span> origin main
</code></pre></div></div> <h1 id="4--verify-encryption-and-export-key">4 ‚úÖ Verify Encryption and Export Key</h1> <p>Check which files are encrypted and export the <code class="language-plaintext highlighter-rouge">git-crypt</code> key to share with collaborators or back up securely. üîç</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git-crypt status
git-crypt export-key <span class="s2">"your_key_file_location"</span>
</code></pre></div></div> <h1 id="5--decrypt-files">5 üîì Decrypt Files</h1> <p>Clone the encrypted repository and unlock the files using the exported key. üóùÔ∏è</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>git-crypt gnupg
git clone https://github.com/your_github_username/your_github_repo.git
<span class="nb">cd </span>your_github_repo
gpg <span class="nt">--import</span> <span class="s2">"your_key_file_location"</span>
git-crypt status
git-crypt unlock <span class="s2">"your_key_file_location"</span>
</code></pre></div></div> <h1 id="6--helpful-tips">6 üìù Helpful Tips</h1> <ul> <li><strong>Replace placeholders</strong>: Update <code class="language-plaintext highlighter-rouge">your_github_username</code>, <code class="language-plaintext highlighter-rouge">your_github_username_email</code>, <code class="language-plaintext highlighter-rouge">your_github_token</code>, and <code class="language-plaintext highlighter-rouge">your_github_repo</code> with your actual GitHub details. üñåÔ∏è</li> <li><strong>Token permissions</strong>: Ensure your GitHub personal access token has the <code class="language-plaintext highlighter-rouge">repo</code> scope for full access. üîê</li> <li><strong>Secure key sharing</strong>: Share the <code class="language-plaintext highlighter-rouge">git-crypt</code> key (<code class="language-plaintext highlighter-rouge">"your_key_file_location"</code>) securely with collaborators to allow decryption. ü§ù</li> <li><strong>Fix encryption issues</strong>: If some files aren‚Äôt encrypted properly, run <code class="language-plaintext highlighter-rouge">git-crypt status -f</code> to stage encrypted versions. üõ†Ô∏è</li> <li><strong>Environment</strong>: This guide is tailored for Linux environments like Google Colab, but the concepts apply broadly. üêß</li> </ul> <p>Happy coding and stay secure! üéâ</p>]]></content><author><name></name></author><category term="Python"/><category term="Git"/><category term="GitHub"/><category term="git-crypt"/><summary type="html"><![CDATA[Step-by-step Markdown guide for GitHub setup and encryption using git-crypt in Linux, with emojis and clear structure. üéâ]]></summary></entry><entry><title type="html">Steps to Creating a README</title><link href="https://danhtran2mind.github.io/blog/2024/post3/" rel="alternate" type="text/html" title="Steps to Creating a README"/><published>2024-10-14T00:00:00+00:00</published><updated>2024-10-14T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2024/post3</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2024/post3/"><![CDATA[<h1 id="steps-to-creating-a-readme">Steps to Creating a README</h1> <h2 id="i-following-cisco-at-data-analytics-essentials-course-1">I. Following Cisco at Data Analytics Essentials Course [1]</h2> <p>The following is a sample project README file that was created using a template. Select each section of the document for more information.</p> <h3 id="1-project-title">1. Project Title</h3> <p>The name of the project and a brief description of the main goal and purpose of the project.</p> <h3 id="2-demo-link">2. Demo Link</h3> <p>If you have a working demo of the project, provide the link so that readers can see your project in action.</p> <h3 id="3-table-of-contents-optional">3. Table of Contents (optional)</h3> <p>If the project has sections, a table of contents can be generated from the section titles. In this raw text example, the section titles are proceeded by the ## characters.</p> <h3 id="4-business-understanding">4. Business Understanding</h3> <p>Your description of the goals and purpose for the project. In this section, you should explain a little about what you wanted to accomplish, why you selected this analysis project, and any challenges that you faced while working through the project.</p> <h3 id="5-data-understanding">5. Data Understanding</h3> <p>Explain your data sources and why you chose the particular data sets that you did. You can also discuss additional enhancements or analysis that you want to perform in the future.</p> <h3 id="6-screenshots-of-visualizationsresults">6. Screenshots of Visualizations/Results</h3> <p>Examples of the process or outputs. In analytics, these can be images of visualizations.</p> <h3 id="7-technologies">7. Technologies</h3> <p>List all of the technologies you used to complete the project, to show your proficiency with these tools.</p> <h3 id="8-setup">8. Setup</h3> <p>Instructions on how to set up or install the environment and any dependencies that are required. This section can also include usage instructions for readers who want to duplicate your results.</p> <h3 id="9-approach">9. Approach</h3> <p>For analytics projects, this section describes the process and the types of analysis utilized to obtain the data, prepare and clean it, and to test the outcomes.</p> <h3 id="10-status">10. Status</h3> <p>The current status of the project. In most cases, you will be putting information into the repository while you are working on the project, so the status will be ‚Äúin process‚Äù and, later, ‚Äúcomplete/released‚Äù. If there are multiple versions of your project, you can indicate the version here, as well.</p> <h3 id="11-creadit">11. Creadit</h3> <p>List of individuals or organizations that contributed or provided assistance to you while you created the project. You can also list sites that provided inspiration or feedback.</p> <h2 id="ii-following-freecodecamp-at-how-to-write-a-good-readme-file-for-your-github-project-article-2">II. Following freeCodeCamp at ‚ÄúHow to Write a Good README File for Your GitHub Project‚Äù article [2]</h2> <h3 id="1-projects-title">1. Project‚Äôs Title</h3> <p>This is the name of the project. It describes the whole project in one sentence, and helps people understand <strong>what</strong> the main goal and aim of the project is.</p> <h3 id="2-project-description">2. Project Description</h3> <p>This is an important component of your project that many new developers often overlook.</p> <p>Your description is an extremely important aspect of your project. A well-crafted description allows you to show off your work to other developers as well as potential employers.</p> <p>The quality of a README description often differentiates a good project from a bad project. A good one takes advantage of the opportunity to explain and showcase:</p> <ul> <li>What your application does,</li> <li>Why you used the technologies you used,</li> <li>Some of the challenges you faced and features you hope to implement in the future.</li> </ul> <h3 id="3-table-of-contents-optional-1">3. Table of Contents (Optional)</h3> <p>If your README is very long, you might want to add a table of contents to make it easy for users to navigate to different sections easily. It will make it easier for readers to move around the project with ease.</p> <h3 id="4-how-to-install-and-run-the-project">4. How to Install and Run the Project</h3> <p>If you are working on a project that a user needs to install or run locally in a machine like a ‚ÄúPOS‚Äù, you should include the steps required to install your project and also the required dependencies if any.</p> <p>Provide a step-by-step description of how to get the development environment set and running.</p> <h3 id="5-how-to-use-the-project">5. How to Use the Project</h3> <p>Provide instructions and examples so users/contributors can use the project. This will make it easy for them in case they encounter a problem ‚Äì they will always have a place to reference what is expected.</p> <p>You can also make use of visual aids by including materials like screenshots to show examples of the running project and also the structure and design principles used in your project.</p> <p>Also if your project will require authentication like passwords or usernames, this is a good section to include the credentials.</p> <h3 id="6-include-credits">6. Include Credits</h3> <p>If you worked on the project as a team or an organization, list your collaborators/team members. You should also include links to their GitHub profiles and social media too.</p> <p>Also, if you followed tutorials or referenced a certain material that might help the user to build that particular project, include links to those here as well.</p> <p>This is just a way to show your appreciation and also to help others get a first hand copy of the project.</p> <h3 id="7-add-a-license">7. Add a License</h3> <p>For most README files, this is usually considered the last part. It lets other developers know what they can and cannot do with your project.</p> <p>We have different types of licenses depending on the kind of project you are working on. Depending on the one you will choose it will determine the contributions your project gets.</p> <p>The most common one is the GPL License which allows other to make modification to your code and use it for commercial purposes. If you need help choosing a license, use check out this link: https://choosealicense.com/</p> <p>Up to this point what we have covered are the minimum requirements for a good README. But you might also want to consider adding the following sections to make it more eye catching and interactive.</p> <h3 id="8-badges-additional-readme-sections">8. Badges (Additional README Sections)</h3> <p>Badges aren‚Äôt necessary, but using them is a simple way of letting other developers know that you know what you‚Äôre doing.</p> <p>Having this section can also be helpful to help link to important tools and also show some simple stats about your project like the number of forks, contributors, open issues etc‚Ä¶</p> <p>Below is a screenshot from one of my projects that shows how you can make use of badges: <img src="https://www.freecodecamp.org/news/content/images/2021/11/check.png" alt="Badges"/></p> <p>The good thing about this section is that it automatically updates it self.</p> <p>Don‚Äôt know where to get them from? Check out the badges hosted by <a href="https://shields.io/">shields.io</a>. They have a ton of badges to help you get started. You may not understand what they all represent now, but you will in time.</p> <h3 id="9-how-to-contribute-to-the-project">9. How to Contribute to the Project</h3> <p>This mostly will be useful if you are developing an open-source project that you will need other developers to contribute to. You will want to add guidelines to let them know how they can contribute to your project.</p> <p>Also it is important to make sure that the licence you choose for an open-source projects is correct to avoid future conflicts. And adding contribution guidelines will play a big role.</p> <p>Some of the most common guidelines include the <a href="https://www.contributor-covenant.org/">Contributor Covenant</a> and the <a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors">Contributing guide</a>. Thes docs will give you the help you need when setting rules for your project.</p> <h3 id="10-include-tests">10. Include Tests</h3> <p>Go the extra mile and write tests for your application. Then provide code examples and how to run them.</p> <p>This will help show that you are certain and confident that your project will work without any challenges, which will give other people confidence in it, too</p> <h2 id="iii-following-llma-using-the-promt-profesional-reamemd-markdown3">III. Following LLMA (using the promt ‚Äúprofesional reame.md markdown‚Äù)[3]</h2> <p>Here is a sample <code class="language-plaintext highlighter-rouge">README.md</code> file for a machine learning project, written in a professional tone and using Markdown formatting:</p> <h1 id="machine-learning-project-project-name"><strong>Machine Learning Project: [Project Name]</strong></h1> <h3 id="overview"><strong>Overview</strong></h3> <p>This project aims to develop a machine learning model to [briefly describe the problem or goal of the project]. The model will be trained on [dataset/source] and evaluated using [evaluation metrics].</p> <h3 id="background"><strong>Background</strong></h3> <p>[ Briefly describe the context and motivation behind the project ]</p> <h3 id="dataset"><strong>Dataset</strong></h3> <ul> <li><strong>Source:</strong> [Dataset source]</li> <li><strong>Description:</strong> [Briefly describe the dataset, including its size, features, and target variable]</li> <li><strong>Preprocessing:</strong> [Describe any preprocessing steps taken, such as data cleaning, feature scaling, or encoding]</li> </ul> <h3 id="methodology"><strong>Methodology</strong></h3> <ul> <li><strong>Model Selection:</strong> [Describe the machine learning algorithm(s) used, including any hyperparameter tuning]</li> <li><strong>Training:</strong> [Describe the training process, including any data splitting, batch size, or number of epochs]</li> <li><strong>Evaluation:</strong> [Describe the evaluation metrics used, including any validation or testing procedures]</li> </ul> <h3 id="results"><strong>Results</strong></h3> <ul> <li><strong>Model Performance:</strong> [Report the model‚Äôs performance on the testing data, including any relevant metrics]</li> <li><strong>Comparison:</strong> [Compare the model‚Äôs performance to any baseline or other models]</li> </ul> <h3 id="code-organization"><strong>Code Organization</strong></h3> <ul> <li><strong><code class="language-plaintext highlighter-rouge">data/</code></strong>: Contains the dataset and any preprocessing scripts</li> <li><strong><code class="language-plaintext highlighter-rouge">models/</code></strong>: Contains the machine learning model code and any hyperparameter tuning scripts</li> <li><strong><code class="language-plaintext highlighter-rouge">evaluation/</code></strong>: Contains the evaluation metrics and any testing procedures</li> <li><strong><code class="language-plaintext highlighter-rouge">utils/</code></strong>: Contains any utility functions or scripts used throughout the project</li> </ul> <h3 id="requirements"><strong>Requirements</strong></h3> <ul> <li><strong>Python:</strong> [Version]</li> <li><strong>Libraries:</strong> [List any required libraries, including their versions]</li> <li><strong>Hardware:</strong> [List any specific hardware requirements, such as GPU or RAM]</li> </ul> <h3 id="usage"><strong>Usage</strong></h3> <ol> <li>Clone the repository: <code class="language-plaintext highlighter-rouge">git clone https://github.com/[username]/[project-name].git</code></li> <li>Install the required libraries: <code class="language-plaintext highlighter-rouge">pip install -r requirements.txt</code></li> <li>Preprocess the data: <code class="language-plaintext highlighter-rouge">python data/preprocess.py</code></li> <li>Train the model: <code class="language-plaintext highlighter-rouge">python models/train.py</code></li> <li>Evaluate the model: <code class="language-plaintext highlighter-rouge">python evaluation/evaluate.py</code></li> </ol> <h3 id="contributing"><strong>Contributing</strong></h3> <ul> <li><strong>Issues:</strong> [Describe the process for reporting issues or bugs]</li> <li><strong>Pull Requests:</strong> [Describe the process for submitting pull requests or contributing code]</li> </ul> <h3 id="license"><strong>License</strong></h3> <p>[Insert license information, such as MIT or Apache 2.0]</p> <h3 id="acknowledgments"><strong>Acknowledgments</strong></h3> <ul> <li>[List any contributors, collaborators, or acknowledgments]</li> </ul> <h3 id="references"><strong>References</strong></h3> <ul> <li>[List any relevant references or citations]</li> </ul> <p>Note: This is just a sample <code class="language-plaintext highlighter-rouge">README.md</code> file, and you should customize it to fit your specific project‚Äôs needs.</p> <h2 id="references-1">References</h2> <p>[1] Cisco, ‚ÄúData Analytics Essentials‚Äù. Available at: https://www.netacad.com/courses/data-analytics-presentation</p> <p>[2] freeCodeCamp, ‚ÄúHow to Write a Good README File for Your GitHub Project‚Äù. Available at: https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/</p> <p>[3] Llama 3.1 70b. Available at: https://deepinfra.com/</p>]]></content><author><name></name></author><category term="Markdown"/><summary type="html"><![CDATA[Guideline for creating a profesional REAME.md]]></summary></entry><entry><title type="html">Iris Flower Classifier and Visualization App</title><link href="https://danhtran2mind.github.io/blog/2024/post2/" rel="alternate" type="text/html" title="Iris Flower Classifier and Visualization App"/><published>2024-10-12T00:00:00+00:00</published><updated>2024-10-12T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2024/post2</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2024/post2/"><![CDATA[<h1 id="-iris-flower-classifier-and-visualization-app-">üå∫ Iris Flower Classifier and Visualization App üå∫</h1> <p>This Streamlit app helps you predict the species of an Iris flower üíê based on its measurements! üìè</p> <h2 id="features-">Features ‚ú®</h2> <ul> <li><strong>Easy to Use Interface:</strong> Input flower measurements with simple sliders üéöÔ∏è.</li> <li><strong>Accurate Predictions:</strong> Powered by a trained machine learning model üß† for reliable results.</li> <li><strong>Clear Results:</strong> See the predicted species along with your input measurements üìä.</li> </ul> <h2 id="how-to-run-">How to Run üöÄ</h2> <ol> <li><strong>Active the Virtual Enviroment:</strong> (run below command if you want to use virtual environment on Linux) <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span> venv/bin/activate 
</code></pre></div> </div> </li> <li><strong>Install the Essentials:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-r</span> reqiurments.txt
</code></pre></div> </div> </li> <li><strong>Start the App:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>streamlit run streamlit_app.py
</code></pre></div> </div> </li> </ol> <h2 id="usage">Usage</h2> <ol> <li>Open the app in your web browser üåê.</li> <li>Adjust the sliders to enter the sepal and petal measurements.</li> <li>Click ‚ÄúPredict‚Äù to see the magic! ü™Ñ</li> <li>The predicted Iris species will be displayed.</li> </ol> <h2 id="built-with-Ô∏è">Built With üõ†Ô∏è</h2> <ul> <li><strong>Streamlit:</strong> For building the interactive web app ‚ú®.</li> <li><strong>Scikit-learn:</strong> For training the machine learning model üß†.</li> <li><strong>Pandas:</strong> For handling the Iris dataset üìä.</li> </ul> <h2 id="contributing-">Contributing ü§ù</h2> <p>Want to help improve the app? Feel free to open an issue or submit a pull request! üéâ</p>]]></content><author><name></name></author><category term="Python"/><category term="Scikit-learn"/><category term="Streamlit"/><category term="Machine Learning"/><category term="Visualization"/><summary type="html"><![CDATA[This Streamlit app helps you predict the species of an Iris flower üíê based on its measurements! üìè]]></summary></entry><entry><title type="html">Hello World in Python</title><link href="https://danhtran2mind.github.io/blog/2024/post1/" rel="alternate" type="text/html" title="Hello World in Python"/><published>2024-09-17T00:00:00+00:00</published><updated>2024-09-17T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2024/post1</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2024/post1/"><![CDATA[<h2 id="your-first-python-program-saying-hello-world-">Your First Python Program: Saying ‚ÄúHello World‚Äù üåé</h2> <p>Ready to dive into the world of Python programming? Let‚Äôs start with the most iconic introductory program ‚Äì printing ‚ÄúHello World‚Äù to the console. It‚Äôs a simple yet satisfying way to begin your coding journey.</p> <p><strong>Here‚Äôs the code:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello World</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p><strong>Let‚Äôs break it down:</strong></p> <ul> <li><strong><code class="language-plaintext highlighter-rouge">print()</code>:</strong> This is a built-in Python function. Its job is to display whatever is inside the parentheses on your screen.</li> <li><strong>‚ÄúHello World‚Äù</strong>: This is the text you want to display. The text needs to be enclosed in quotation marks (single or double) to tell Python it‚Äôs a string literal (a piece of text).</li> </ul> <p><strong>How to Run the Code:</strong></p> <ol> <li><strong>Save your code:</strong> Open a text editor (like Notepad, Sublime Text, or VS Code) and paste the code. Save the file with a <code class="language-plaintext highlighter-rouge">.py</code> extension (e.g., <code class="language-plaintext highlighter-rouge">hello.py</code>).</li> <li><strong>Open your terminal/command prompt:</strong> Navigate to the directory where you saved your file.</li> <li><strong>Run the code:</strong> Type <code class="language-plaintext highlighter-rouge">python hello.py</code> (replace <code class="language-plaintext highlighter-rouge">hello.py</code> with your file name) and press Enter.</li> </ol> <p><strong>You did it!</strong> You should now see ‚ÄúHello World‚Äù displayed in your terminal. üéâ</p> <p>This might seem basic, but it introduces fundamental programming concepts like:</p> <ul> <li><strong>Syntax:</strong> Python‚Äôs specific rules for writing code.</li> <li><strong>Functions:</strong> Blocks of reusable code that perform tasks.</li> <li><strong>Data Types:</strong> ‚ÄúHello World‚Äù is a string of characters.</li> </ul> <p>This is just the beginning. Stay tuned for more Python adventures! üöÄ</p>]]></content><author><name></name></author><category term="Programming"/><category term="Python"/><summary type="html"><![CDATA[How to write "Hello World" in Python]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://danhtran2mind.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://danhtran2mind.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We‚Äôre introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we‚Äôre introducing Gemini 1.5 Flash: a model that‚Äôs lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We‚Äôre also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5‚Äôs 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It‚Äôs optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it‚Äôs a lighter weight model than 1.5 Pro, it‚Äôs highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it‚Äôs been trained by 1.5 Pro through a process called ‚Äúdistillation,‚Äù where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash‚Äôs availability and pricing.Over the last few months, we‚Äôve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we‚Äôve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We‚Äôve improved control over the model‚Äôs responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we‚Äôve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we‚Äôre now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do ‚Äî not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we‚Äôre also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We‚Äôre announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we‚Äôve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind‚Äôs mission to build AI responsibly to benefit humanity, we‚Äôve always wanted to develop universal AI agents that can be helpful in everyday life. That‚Äôs why today, we‚Äôre sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do ‚Äî and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we‚Äôve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we‚Äôve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we‚Äôve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they‚Äôre being used in, and respond quickly, in conversation.With technology like this, it‚Äôs easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We‚Äôve made incredible progress so far with our family of Gemini models, and we‚Äôre always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we‚Äôre able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google‚Äôs privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let‚Äôs stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://danhtran2mind.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://danhtran2mind.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://danhtran2mind.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio¬†Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website!¬†üéâüéâ</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as¬†sources.</p> <p>Any questions or suggestions? üëâ Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on¬†GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>